// Code generated by protoc-gen-micro. DO NOT EDIT.
// source: proto/metatable/source.proto

package metatable

import (
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	math "math"
)

import (
	context "context"
	client "github.com/micro/go-micro/v2/client"
	server "github.com/micro/go-micro/v2/server"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ client.Option
var _ server.Option

// Client API for Source service

type SourceService interface {
	// 导入YAML
	ImportYaml(ctx context.Context, in *ImportYamlRequest, opts ...client.CallOption) (*BlankResponse, error)
	// 列举
	List(ctx context.Context, in *ListRequest, opts ...client.CallOption) (*SourceListResponse, error)
}

type sourceService struct {
	c    client.Client
	name string
}

func NewSourceService(name string, c client.Client) SourceService {
	return &sourceService{
		c:    c,
		name: name,
	}
}

func (c *sourceService) ImportYaml(ctx context.Context, in *ImportYamlRequest, opts ...client.CallOption) (*BlankResponse, error) {
	req := c.c.NewRequest(c.name, "Source.ImportYaml", in)
	out := new(BlankResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *sourceService) List(ctx context.Context, in *ListRequest, opts ...client.CallOption) (*SourceListResponse, error) {
	req := c.c.NewRequest(c.name, "Source.List", in)
	out := new(SourceListResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for Source service

type SourceHandler interface {
	// 导入YAML
	ImportYaml(context.Context, *ImportYamlRequest, *BlankResponse) error
	// 列举
	List(context.Context, *ListRequest, *SourceListResponse) error
}

func RegisterSourceHandler(s server.Server, hdlr SourceHandler, opts ...server.HandlerOption) error {
	type source interface {
		ImportYaml(ctx context.Context, in *ImportYamlRequest, out *BlankResponse) error
		List(ctx context.Context, in *ListRequest, out *SourceListResponse) error
	}
	type Source struct {
		source
	}
	h := &sourceHandler{hdlr}
	return s.Handle(s.NewHandler(&Source{h}, opts...))
}

type sourceHandler struct {
	SourceHandler
}

func (h *sourceHandler) ImportYaml(ctx context.Context, in *ImportYamlRequest, out *BlankResponse) error {
	return h.SourceHandler.ImportYaml(ctx, in, out)
}

func (h *sourceHandler) List(ctx context.Context, in *ListRequest, out *SourceListResponse) error {
	return h.SourceHandler.List(ctx, in, out)
}
